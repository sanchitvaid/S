-- QUERY 1 - CREATE A DATABASE NAMED EMPLOYEE //
CREATE DATABASE employee ; 
USE employee ;

-- QUERY 3 : FETCHING DETAILS FROM EMPLOYEE TABLE //
SELECT  ï»¿EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT FROM emp_record_table 
ORDER BY ï»¿EMP_ID ;

-- QUERY 4 : (1) FETCHING DETAILS WHERE EMP RATING IS LESS THAN TWO //
SELECT ï»¿EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING FROM emp_record_table 
WHERE EMP_RATING < 2 ;

-- (2) FETCHING DETAILS WHERE EMP RATING IS GREATER THAN FOUR //
SELECT ï»¿EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING FROM emp_record_table 
WHERE EMP_RATING > 4 ;

-- (3) FETCHING DETAILS WHERE EMP RATING IS BETWEEN TWO AND FOUR //
SELECT ï»¿EMP_ID, FIRST_NAME, LAST_NAME, GENDER, DEPT, EMP_RATING FROM emp_record_table 
WHERE EMP_RATING BETWEEN 2 AND 4 ;


-- QUERY 5 : CONCATENATING FIRST AND LAST NAME OF EMPLOYEES WHERE DEPARTMENT IS FINANCE //
SELECT CONCAT(FIRST_NAME , ' ' , LAST_NAME) AS NAME
FROM emp_record_table 
WHERE DEPT = 'FINANCE' ;



-- QUERY 6 : LISTING EMPLOYEES WHO HAVE SOMEONE REPORTING TO THEM -
SELECT m.ï»¿EMP_ID ,m.FIRST_NAME , m.ROLE , m.EXP , COUNT(m.ï»¿EMP_ID) AS 'EMP_COUNT'
FROM emp_record_table m 
INNER JOIN emp_record_table e
ON m.ï»¿EMP_ID = e.MANAGER_ID
AND e.ï»¿EMP_ID != e.MANAGER_ID 
WHERE m.ROLE IN ("MANAGER", "PRESIDENT", "CEO") 
GROUP BY m.ï»¿EMP_ID
ORDER BY m.ï»¿EMP_ID; 


-- QUERY 7 : MAKING A LIST OF EMPLOYEES USING UNION WHERE DEPARTMENT IS HEALTHCARE AND FINANCE //
SELECT ï»¿EMP_ID FROM emp_record_table 
UNION
SELECT FIRST_NAME FROM emp_record_table 
WHERE DEPT = 'HEALTHCARE'
OR DEPT = 'FINANCE' ;


-- QUERY 8 : LISTING EMPLOYEE DETAILS GROUPED BY DEPARTMENT ALONG WITH THEIR RESPECTIVE MAXIMUM DEPT RATING -
SELECT ï»¿EMP_ID, FIRST_NAME, LAST_NAME, ROLE, DEPT, EMP_RATING ,
MAX(EMP_RATING) OVER (PARTITION BY DEPT) AS MAX_DEPT_RATING
FROM emp_record_table ;





-- QUERY 9 : LISTING MAX AND MIN SALARY IN EACH DISTINCT ROLE -
SELECT DISTINCT ROLE , 
MIN(SALARY) OVER (PARTITION BY ROLE) AS MIN_SALARY,
MAX(SALARY) OVER (PARTITION BY ROLE) AS MAX_SALARY
FROM emp_record_table ;

-- QUERY 10 : ASSINING RANK TO EACH EMPLOYEE ACCORDING TO THEIR WORK EXPERIENCE -
SELECT  ï»¿EMP_ID , FIRST_NAME , LAST_NAME , ROLE , 
RANK() OVER (ORDER BY EXP) AS 'EXP_RANK'
FROM emp_record_table ;


-- QUERY 11 : CREATING A VIEW WHERE SALARY > 6000 AND GROUPING BY COUNTRY -
CREATE VIEW emp_view AS
SELECT * FROM emp_record_table 
WHERE SALARY > 6000
GROUP BY COUNTRY ;

SELECT * FROM emp_view ;


-- QUERY 12 : NESTED QUERY TO SHOW EMPLOYEES WTIH MORE THAN 10 YEARS OF EXPERIENCE -
SELECT * FROM emp_record_table 
WHERE 
EXP IN (SELECT EXP FROM emp_record_table WHERE EXP > 10) ;

-- QUERY 13 : CREATING A STORED PROCEDURE WHICH RETURNS EMPLOYEE DETAILS WITH MORE THAN 3 YEARS OF EXP -
DELIMITER //
CREATE PROCEDURE emp_procedure()
BEGIN
SELECT * FROM emp_record_table 
WHERE EXP > 3 ;
END //

CALL emp_procedure () ;

-- QUERY 14 : CREATING A FUNCTION TO CHECK THE JOB PROFILE OF EMPLOYEE IN LINE WITH THE COMPANY'S STANDARDS -
DELIMITER //
CREATE FUNCTION emp_func (EXPERIENCE INT)
RETURNS VARCHAR(50) DETERMINISTIC
BEGIN 
DECLARE POINTER VARCHAR (30) ;
IF
EXPERIENCE <= 2 THEN SET POINTER = 'JUNIOR DATA SCIENTIST ' ;
ELSEIF
EXPERIENCE BETWEEN 3 AND 5 THEN SET POINTER = 'ASSOCIATE DATA SCIENTIST' ;
ELSEIF
EXPERIENCE BETWEEN 6 AND 10 THEN SET POINTER = 'SENIOR DATA SCIENTIST' ;
ELSEIF
EXPERIENCE BETWEEN 11 AND 12 THEN SET POINTER = 'LEAD DATA SCIENTIS' ;
ELSE 
SET POINTER = 'MANAGER' ;
END IF;
RETURN (POINTER);
END;
END //

-- QUERY 15 : CREATING AN INDEX ON EMPLOYEE TABLE TO CUT COST -
CREATE INDEX emp_index ON emp_record_table(FIRST_NAME) ;
SELECT * FROM emp_record_table 
WHERE 
FIRST_NAME = 'ERIC' ;



-- QUERY 16 : CREATING A FUNCTION TO DETERMINE THE BONUS GIVEN TO AN EMPLOYEE BASED ON THEIR SALARY AND RATING - 
DELIMITER //

CREATE FUNCTION BONUS_FUNC(EMPLOYEE_ID VARCHAR(30) , SAL INT , RATING INT )
RETURNS INT DETERMINISTIC
BEGIN
DECLARE NUM INT DEFAULT 1;
DECLARE POINTER INT DEFAULT 1 ;

WHILE NUM < 200 
DO
SET POINTER = SAL * 0.05 * RATING ;
SET NUM = NUM +1 ;
END WHILE ;
RETURN POINTER ;
END ;
END //

SELECT FIRST_NAME , ï»¿EMP_ID , BONUS_FUNC(ï»¿EMP_ID , SALARY , EMP_RATING) AS BONUS FROM emp_record_table ; 




-- QUERY 17 : CALCULATING AVERAGE EMPLOYEE SALARY DISTRIBUTION BASED ON CONTINENT AND COUNTRY -

SELECT FIRST_NAME, COUNTRY , CONTINENT, SALARY,
AVG(SALARY)
OVER (PARTITION BY CONTINENT) AS 'AVG_CONTINENT_SALARY',
AVG(SALARY) 
OVER (PARTITION BY COUNTRY) AS 'AVG_COUNTRY_SALARY'
FROM emp_record_table ;











